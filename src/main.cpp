#include <Arduino.h>
#include "hexapod.hpp"
#include "servo_controller.hpp"
#include "leg.hpp"
#include "ble_controller.hpp"

BLEController ble;

Hexapod hexapod;
Leg testLeg(1, 0, 6, 5, 4); // Test leg 1: coxa=ch6, femur=ch5, tibia=ch4

// Bi·∫øn l∆∞u g√≥c hi·ªán t·∫°i cho test
int currentLeg = 0;
float currentX = 0;
float currentY = 0;
float currentZ = 0;
Leg currentLegs[6] = {
    Leg(0, 0, 2, 1, 0),  // Leg 0
    Leg(1, 0, 6, 5, 4),  // Leg 1
    Leg(2, 0, 10, 9, 8), // Leg 2
    Leg(3, 1, 2, 1, 0),  // Leg 3
    Leg(4, 1, 6, 5, 4),  // Leg 4
    Leg(5, 1, 10, 9, 8)  // Leg 5
};

// Bi·∫øn l∆∞u g√≥c servo hi·ªán t·∫°i cho ƒëi·ªÅu ch·ªânh tr·ª±c ti·∫øp
float currentServoAngles[6][3] = {
    {90.0f, 90.0f, 90.0f}, // Leg 0 (coxa, femur, tibia)
    {90.0f, 90.0f, 90.0f}, // Leg 1
    {90.0f, 90.0f, 90.0f}, // Leg 2
    {90.0f, 90.0f, 90.0f}, // Leg 3
    {90.0f, 90.0f, 90.0f}, // Leg 4
    {90.0f, 90.0f, 90.0f}  // Leg 5
};

// T√™n c·ªßa c√°c kh·ªõp
const char* jointNames[] = {"Coxa", "Femur", "Tibia"};


// C√°c khai b√°o h√†m (function prototypes)
void computeFK(int legId, float coxaAngle, float femurAngle, float tibiaAngle, float& x, float& y, float& z);
void computeFKArray(int legId, float coxaAngle, float femurAngle, float tibiaAngle);
void goHome();
void testLegForward();
void showTripodAngles(Leg legs[], const char *phase);
void testTripodGait();
void handlePosition();
void testServoAngles();
void chooseLeg();
void moveDirection(Leg legs[], int tripod1[], int tripod2[], float targetX, float targetY, float targetZ, int stepDelay, bool useInterpolation);
void moveLateral(Leg legs[], int tripod1[], int tripod2[], float x, float stepHeight, int stepDelay, bool useInterpolation);
float calculateTurnAdjustment(float y, int legIndex, float turnFactor);
void moveForward(Leg legs[], int tripod1[], int tripod2[]);
void turnRobot(Leg legs[], int tripod1[], int tripod2[], float turnFactor, int stepDelay, bool useInterpolation);
void moveWithJoystick(float joystickX, float joystickY, bool continuous);
void handleBLECommand(char input);
void testJoystickSimulation();
void createLegTrajectory(float t, float& x, float& y, float& z);
float bezier(float t, float p0, float p1, float p2, float p3);
void createSmoothTrajectory(float t, float& x, float& y, float& z);
void createBioinspiredTrajectory(float t, float& x, float& y, float& z);


void computeFK(int legId, float coxaAngle, float femurAngle, float tibiaAngle, 
              float& x, float& y, float& z) 
{
    // Th√¥ng s·ªë v·∫≠t l√Ω c·ªßa robot
    const float COXA_LENGTH = 65.0f;
    const float FEMUR_LENGTH = 65.0f;
    const float TIBIA_LENGTH = 95.0f;
    
    // C√°c offset chu·∫©n
    const float COXA_OFFSET = 90.0f;
    const float FEMUR_OFFSET = 90.0f;
    const float TIBIA_OFFSET = 90.0f;

    const float HOME_CORRECTION[6][3] = {
        {0.0f, 8.0f, -2.0f},     // Leg 0: 0¬∞, +8¬∞, -2¬∞
        {-2.0f, 3.0f, 3.0f},   // Leg 1: -2¬∞, +3¬∞, +3¬∞
        {-5.0f, -4.0f, 12.0f},   // Leg 2: -5¬∞, -4¬∞, +12¬∞
        {8.0f, -10.0f, 7.0f},   // Leg 3: 8¬∞, -10¬∞, +7¬∞
        {-6.0f, 3.0f, -10.0f},   // Leg 4: -6¬∞, +3¬∞, -10¬∞
        {-0.02f, 5.22f, -5.20f}    // Leg 5: -0.02¬∞, +5.22¬∞, -5.20¬∞
    };
    
    // X√°c ƒë·ªãnh h∆∞·ªõng servo d·ª±a v√†o ID ch√¢n
    int coxa_dir = (legId < 3) ? 1 : -1;
    int femur_dir = (legId < 3) ? 1 : -1;
    int tibia_dir = (legId < 3) ? 1 : -1;  // H∆∞·ªõng tibia lu√¥n ng∆∞·ª£c

    // Th√™m HOME_CORRECTION v√†o t√≠nh to√°n
    float coxa_correction = HOME_CORRECTION[legId][0];
    float femur_correction = HOME_CORRECTION[legId][1];
    float tibia_correction = HOME_CORRECTION[legId][2];

    float coxa_angle = (coxaAngle - COXA_OFFSET - coxa_correction) / coxa_dir;
    float femur_angle = (femurAngle - FEMUR_OFFSET - femur_correction) / femur_dir;
    float tibia_angle = (tibiaAngle - TIBIA_OFFSET - tibia_correction) / tibia_dir;

    // Chuy·ªÉn ƒë·ªïi sang radians
    float coxa_rad = coxa_angle * M_PI / 180.0f;
    float femur_rad = femur_angle * M_PI / 180.0f;
    
    // T√≠nh ƒëi·ªÉm cu·ªëi c·ªßa coxa
    float coxa_x = COXA_LENGTH * cos(coxa_rad);
    float coxa_y = COXA_LENGTH * sin(coxa_rad);
    
    // T√≠nh chi·ªÅu d√†i ph·∫ßn femur tr√™n m·∫∑t ph·∫≥ng ngang v√† chi·ªÅu cao
    float femur_proj = FEMUR_LENGTH * cos(femur_rad);
    float femur_height = FEMUR_LENGTH * sin(femur_rad);
    
    // T√≠nh g√≥c t·ªïng c·ªßa tibia so v·ªõi m·∫∑t ph·∫≥ng ngang
    float tibia_angle_total = femur_angle + tibia_angle;
    float tibia_rad_total = tibia_angle_total * M_PI / 180.0f;
    
    // T√≠nh chi·ªÅu d√†i ph·∫ßn tibia tr√™n m·∫∑t ph·∫≥ng ngang v√† chi·ªÅu cao
    float tibia_proj = TIBIA_LENGTH * cos(tibia_rad_total);
    float tibia_height = TIBIA_LENGTH * sin(tibia_rad_total);
    
    // T√≠nh t·ªça ƒë·ªô cu·ªëi c√πng c·ªßa ƒë·∫ßu ch√¢n
    x = coxa_x + femur_proj * cos(coxa_rad) + tibia_proj * cos(coxa_rad);
    y = coxa_y + femur_proj * sin(coxa_rad) + tibia_proj * sin(coxa_rad);
    z = -(femur_height + tibia_height); // ƒê·∫£o d·∫•u z v√¨ tr·ª•c z h∆∞·ªõng xu·ªëng trong h·ªá t·ªça ƒë·ªô robot
}

// Phi√™n b·∫£n tr·∫£ v·ªÅ t·ªça ƒë·ªô d·∫°ng m·∫£ng
void computeFKArray(int legId, float coxaAngle, float femurAngle, float tibiaAngle) 
{
    float x, y, z;
    computeFK(legId, coxaAngle, femurAngle, tibiaAngle, x, y, z);
    Serial.print("FK for Leg ");
    Serial.print(legId);
    Serial.print(": (");
    Serial.print(x);
    Serial.print(", ");
    Serial.print(y);
    Serial.print(", ");
    Serial.print(z);
    Serial.println(")");
}

void goHome()
{
    Serial.println("Going to home position using IK...");

    // V·ªã tr√≠ home trong kh√¥ng gian 3D (ƒë∆°n v·ªã: mm)
    // ƒêi·ªÅu ch·ªânh c√°c gi√° tr·ªã n√†y cho ph√π h·ª£p v·ªõi robot c·ªßa b·∫°n
    const float homePositions[6][3] = {
        // [x, y, z] - t·ªça ƒë·ªô trong h·ªá t·ªça ƒë·ªô c·ªßa t·ª´ng ch√¢n
        {198.5f, 0.0f, -50.1f},   // Leg 0 (ph·∫£i-tr∆∞·ªõc)
        {198.5f, 0.0f, -50.1f},   // Leg 1 (ph·∫£i-gi·ªØa) 
        {198.5f, 0.0f, -50.1f},   // Leg 2 (ph·∫£i-sau)
        {198.5f, 0.0f, -50.1f},    // Leg 3 (tr√°i-tr∆∞·ªõc) - L∆∞u √Ω d·∫•u Y ƒë·∫£o cho ch√¢n tr√°i
        {198.5f, 0.0f, -50.1f},    // Leg 4 (tr√°i-gi·ªØa) - L∆∞u √Ω d·∫•u Y ƒë·∫£o cho ch√¢n tr√°i
        {198.5f, 0.0f, -50.1f}     // Leg 5 (tr√°i-sau) - L∆∞u √Ω d·∫•u Y ƒë·∫£o cho ch√¢n tr√°i
    };

    // √Åp d·ª•ng v·ªã tr√≠ home cho t·∫•t c·∫£ c√°c ch√¢n
    for (int i = 0; i < 6; i++)
    {
        Serial.print("Setting home position for leg ");
        Serial.print(i);
        Serial.print(": x=");
        Serial.print(homePositions[i][0]);
        Serial.print(", y=");
        Serial.print(homePositions[i][1]);
        Serial.print(", z=");
        Serial.println(homePositions[i][2]);

        currentLegs[i].setTargetPosition(
            homePositions[i][0],
            homePositions[i][1],
            homePositions[i][2]);
        currentLegs[i].update();

        delay(100); // Th·ªùi gian ƒë·ªÉ servo di chuy·ªÉn
    }

    Serial.println("Home position completed using IK!");
}

void testLegForward()
{
    Serial.println("\n=== TESTING LEG 0 FORWARD ===");
    testLeg.setTargetPosition(200.0f, 0.0f, 0.0f);
    testLeg.update();
}

void showTripodAngles(Leg legs[], const char *phase)
{
    Serial.print("  ");
    Serial.print(phase);
    Serial.println(":");

    // Show Tripod 1
    Serial.print("    Tripod 1 (0,2,4): ");
    for (int i : {0, 2, 4})
    {
        auto angles = legs[i].getServoAngles();
        Serial.print("L");
        Serial.print(i);
        Serial.print("(");
        Serial.print((int)angles[0]);
        Serial.print(",");
        Serial.print((int)angles[1]);
        Serial.print(",");
        Serial.print((int)angles[2]);
        Serial.print(") ");
    }
    Serial.println();

    // Show Tripod 2
    Serial.print("    Tripod 2 (1,3,5): ");
    for (int i : {1, 3, 5})
    {
        auto angles = legs[i].getServoAngles();
        Serial.print("L");
        Serial.print(i);
        Serial.print("(");
        Serial.print((int)angles[0]);
        Serial.print(",");
        Serial.print((int)angles[1]);
        Serial.print(",");
        Serial.print((int)angles[2]);
        Serial.print(") ");
    }
    Serial.println();
}

// Th√™m function n√†y:
void testTripodGait()
{
    // Th√¥ng s·ªë di chuy·ªÉn
    const float x_home = 198.5f;        // X coordinate for all legs
    const float y_home = 0.0f;          // Y coordinate for all legs
    const float z_home = -50.1f;        // Z coordinate for all legs
    const int stepDelay = 400;          // Delay gi·ªØa c√°c b∆∞·ªõc (ms)
    const int UPDATE_INTERVAL = 15;     // C·∫≠p nh·∫≠t m·ªói 15ms ƒë·ªÉ c√≥ chuy·ªÉn ƒë·ªông m∆∞·ª£t
    const int STEPS = stepDelay / UPDATE_INTERVAL;
    
    Serial.println("\n=== TRIPOD GAIT TEST WITH SMOOTH TRAJECTORIES ===");
    Serial.println("Using Bezier curves for natural leg movement");
    Serial.println("Tripod 1: Legs 0, 2, 4 (ph·∫£i-tr∆∞·ªõc, ph·∫£i-sau, tr√°i-gi·ªØa)");
    Serial.println("Tripod 2: Legs 1, 3, 5 (ph·∫£i-gi·ªØa, tr√°i-tr∆∞·ªõc, tr√°i-sau)");
    Serial.println("Press any key to start walking sequence...");

    while (!Serial.available())
        delay(100);
    Serial.read();
    while (Serial.available())
        Serial.read();

    // Create all leg objects
    Leg legs[6] = {
        Leg(0, 0, 2, 1, 0),  // Leg 0
        Leg(1, 0, 6, 5, 4),  // Leg 1
        Leg(2, 0, 10, 9, 8), // Leg 2
        Leg(3, 1, 2, 1, 0),  // Leg 3
        Leg(4, 1, 6, 5, 4),  // Leg 4
        Leg(5, 1, 10, 9, 8)  // Leg 5
    };

    int tripod1[] = {0, 2, 4};
    int tripod2[] = {1, 3, 5};

    Serial.println("üöÄ Starting tripod gait sequence with smooth trajectories...");

    // Walking cycles
    for (int cycle = 0; cycle < 3; cycle++)
    {
        Serial.print("\n=== WALKING CYCLE ");
        Serial.print(cycle + 1);
        Serial.println(" ===");

        // === TRIPOD 1 WALKING SEQUENCE (SMOOTH) ===
        Serial.println("TRIPOD 1 (0,2,4) WALKING WITH SMOOTH TRAJECTORY:");
        
        // Qu·ªπ ƒë·∫°o m∆∞·ª£t m√† cho tripod1
        for (int step = 0; step < STEPS; step++) {
            float t = (float)step / STEPS;  // 0.0 -> 1.0
            
            for (int i = 0; i < 3; i++) {
                float x, y, z;
                // S·ª≠ d·ª•ng qu·ªπ ƒë·∫°o Bezier
                createLegTrajectory(t, x, y, z);
                legs[tripod1[i]].setTargetPosition(x, y, z, t < 0.4f); // Elbow up for first half
                legs[tripod1[i]].update();
            }
            
            delay(UPDATE_INTERVAL);
        }

        showTripodAngles(legs, "Tripod 1 cycle completed");
        delay(100);  // Nh·ªè delay gi·ªØa c√°c chu k·ª≥

        // === TRIPOD 2 WALKING SEQUENCE (SMOOTH) ===
        Serial.println("TRIPOD 2 (1,3,5) WALKING WITH SMOOTH TRAJECTORY:");
        
        // Qu·ªπ ƒë·∫°o m∆∞·ª£t m√† cho tripod2
        for (int step = 0; step < STEPS; step++) {
            float t = (float)step / STEPS;
            
            for (int i = 0; i < 3; i++) {
                float x, y, z;
                createLegTrajectory(t, x, y, z);
                legs[tripod2[i]].setTargetPosition(x, y, z, t < 0.4f); // Elbow up for first half
                legs[tripod2[i]].update();
            }
            
            delay(UPDATE_INTERVAL);
        }

        showTripodAngles(legs, "Tripod 2 cycle completed");
        
        if (cycle < 2)
        {
            Serial.println("Press any key for next cycle...");
            while (!Serial.available())
                delay(100);
            Serial.read();
            while (Serial.available())
                Serial.read();
        }
    }

    // Quay tr·ªü v·ªÅ v·ªã tr√≠ home sau khi ho√†n th√†nh
    Serial.println("\nReturning to home position...");
    for (int i = 0; i < 6; i++)
    {
        legs[i].setTargetPosition(x_home, y_home, z_home);
        legs[i].update();
    }
    delay(500);

    Serial.println("\nüéâ SMOOTH TRIPOD GAIT TEST COMPLETED! üéâ");
}

void handlePosition()
{
    Serial.print("ü¶ø ƒêi·ªÅu ch·ªânh v·ªã tr√≠ ch√¢n ");
    Serial.print(currentLeg);
    Serial.println(" (a/s: X, d/f: Y, g/h: Z, q: Quay l·∫°i)");
    Serial.print("V·ªã tr√≠ hi·ªán t·∫°i: X=");
    Serial.print(currentX);
    Serial.print(", Y=");
    Serial.print(currentY);
    Serial.print(", Z=");
    Serial.println(currentZ);

    bool continueAdjusting = true;
    while (continueAdjusting)
    {
        while (Serial.available())
        {
            char input = Serial.read();
            switch (input)
            {
            case 'a':
                currentX += 1.0;
                Serial.print("X tƒÉng: ");
                Serial.println(currentX);
                break;
            case 's':
                currentX -= 1.0;
                Serial.print("X gi·∫£m: ");
                Serial.println(currentX);
                break;
            case 'd':
                currentY += 1.0;
                Serial.print("Y tƒÉng: ");
                Serial.println(currentY);
                break;
            case 'f':
                currentY -= 1.0;
                Serial.print("Y gi·∫£m: ");
                Serial.println(currentY);
                break;
            case 'g':
                currentZ += 1.0;
                Serial.print("Z tƒÉng: ");
                Serial.println(currentZ);
                break;
            case 'h':
                currentZ -= 1.0;
                Serial.print("Z gi·∫£m: ");
                Serial.println(currentZ);
                break;
            case 'q':
            case 'Q':
                continueAdjusting = false;
                Serial.println("Quay l·∫°i menu ch·ªçn ch√¢n");
                return;
            default:
                break;
            }

            Serial.print("ƒê·∫∑t v·ªã tr√≠ m·ªõi: X=");
            Serial.print(currentX);
            Serial.print(", Y=");
            Serial.print(currentY);
            Serial.print(", Z=");
            Serial.println(currentZ);

            currentLegs[currentLeg].setTargetPosition(currentX, currentY, currentZ);
            currentLegs[currentLeg].update();
        }
    }
}

void testServoAngles()
{
    Serial.print("üîÑ ƒêi·ªÅu ch·ªânh g√≥c servo ch√¢n ");
    Serial.print(currentLeg);
    Serial.println(" (q/w: Coxa, a/s: Femur, z/x: Tibia, r: Reset, e: Quay l·∫°i)");
    
    // Hi·ªÉn th·ªã g√≥c hi·ªán t·∫°i
    Serial.print("G√≥c hi·ªán t·∫°i: Coxa=");
    Serial.print(currentServoAngles[currentLeg][0]);
    Serial.print("¬∞, Femur=");
    Serial.print(currentServoAngles[currentLeg][1]);
    Serial.print("¬∞, Tibia=");
    Serial.print(currentServoAngles[currentLeg][2]);
    Serial.println("¬∞");


    bool continueAdjusting = true;
    while (continueAdjusting)
    {
        while (Serial.available())
        {
            char input = Serial.read();
            switch (input)
            {
            case 'q': // TƒÉng g√≥c Coxa
                currentServoAngles[currentLeg][0] += 1.0f;
                Serial.print("Coxa +1¬∞: ");
                Serial.println(currentServoAngles[currentLeg][0]);
                break;
            case 'w': // Gi·∫£m g√≥c Coxa
                currentServoAngles[currentLeg][0] -= 1.0f;
                Serial.print("Coxa -1¬∞: ");
                Serial.println(currentServoAngles[currentLeg][0]);
                break;
            case 'a': // TƒÉng g√≥c Femur
                currentServoAngles[currentLeg][1] += 1.0f;
                Serial.print("Femur +1¬∞: ");
                Serial.println(currentServoAngles[currentLeg][1]);
                break;
            case 's': // Gi·∫£m g√≥c Femur
                currentServoAngles[currentLeg][1] -= 1.0f;
                Serial.print("Femur -1¬∞: ");
                Serial.println(currentServoAngles[currentLeg][1]);
                break;
            case 'z': // TƒÉng g√≥c Tibia
                currentServoAngles[currentLeg][2] += 1.0f;
                Serial.print("Tibia +1¬∞: ");
                Serial.println(currentServoAngles[currentLeg][2]);
                break;
            case 'x': // Gi·∫£m g√≥c Tibia
                currentServoAngles[currentLeg][2] -= 1.0f;
                Serial.print("Tibia -1¬∞: ");
                Serial.println(currentServoAngles[currentLeg][2]);
                break;
            case 'Q': // TƒÉng g√≥c Coxa 5¬∞
                currentServoAngles[currentLeg][0] += 5.0f;
                Serial.print("Coxa +5¬∞: ");
                Serial.println(currentServoAngles[currentLeg][0]);
                break;
            case 'W': // Gi·∫£m g√≥c Coxa 5¬∞
                currentServoAngles[currentLeg][0] -= 5.0f;
                Serial.print("Coxa -5¬∞: ");
                Serial.println(currentServoAngles[currentLeg][0]);
                break;
            case 'A': // TƒÉng g√≥c Femur 5¬∞
                currentServoAngles[currentLeg][1] += 5.0f;
                Serial.print("Femur +5¬∞: ");
                Serial.println(currentServoAngles[currentLeg][1]);
                break;
            case 'S': // Gi·∫£m g√≥c Femur 5¬∞
                currentServoAngles[currentLeg][1] -= 5.0f;
                Serial.print("Femur -5¬∞: ");
                Serial.println(currentServoAngles[currentLeg][1]);
                break;
            case 'Z': // TƒÉng g√≥c Tibia 5¬∞
                currentServoAngles[currentLeg][2] += 5.0f;
                Serial.print("Tibia +5¬∞: ");
                Serial.println(currentServoAngles[currentLeg][2]);
                break;
            case 'X': // Gi·∫£m g√≥c Tibia 5¬∞
                currentServoAngles[currentLeg][2] -= 5.0f;
                Serial.print("Tibia -5¬∞: ");
                Serial.println(currentServoAngles[currentLeg][2]);
                break;
            case 'r': // Reset v·ªÅ 90¬∞
                currentServoAngles[currentLeg][0] = 90.0f;
                currentServoAngles[currentLeg][1] = 90.0f;
                currentServoAngles[currentLeg][2] = 90.0f;
                Serial.println("Reset g√≥c v·ªÅ 90¬∞");
                break;
            case 'h': // T√≠nh g√≥c HOME_CORRECTION t·ª´ g√≥c hi·ªán t·∫°i
                Serial.println("\n=== T√≠nh HOME_CORRECTION ===");
                Serial.print("Coxa_correction = ");
                Serial.print(currentServoAngles[currentLeg][0] - 90.0f);
                Serial.print(", Femur_correction = ");
                Serial.print(currentServoAngles[currentLeg][1] - 90.0f);
                Serial.print(", Tibia_correction = ");
                Serial.println(currentServoAngles[currentLeg][2] - 90.0f);
                Serial.println("Sao ch√©p gi√° tr·ªã n√†y v√†o m·∫£ng HOME_CORRECTION c·ªßa b·∫°n");
                break;
            case 'e':
                continueAdjusting = false;
                Serial.println("Quay l·∫°i menu ch·ªçn ch√¢n");
                return;
            default:
                break;
            }

            // Gi·ªõi h·∫°n g√≥c trong kho·∫£ng h·ª£p l·ªá (0-180¬∞)
            for (int j = 0; j < 3; j++) {
                currentServoAngles[currentLeg][j] = std::max(0.0f, std::min(180.0f, currentServoAngles[currentLeg][j]));
            }

            // √Åp d·ª•ng g√≥c m·ªõi
            int pca_id = currentLeg / 3;  // 0 cho ch√¢n 0-2, 1 cho ch√¢n 3-5
            
            // X√°c ƒë·ªãnh c√°c k√™nh servo cho t·ª´ng ch√¢n
            int channels[3];
            if (currentLeg % 3 == 0) {         // Ch√¢n 0 ho·∫∑c 3
                channels[0] = 2;  // coxa
                channels[1] = 1;  // femur
                channels[2] = 0;  // tibia
            } else if (currentLeg % 3 == 1) {  // Ch√¢n 1 ho·∫∑c 4
                channels[0] = 6;  // coxa
                channels[1] = 5;  // femur
                channels[2] = 4;  // tibia
            } else {                           // Ch√¢n 2 ho·∫∑c 5
                channels[0] = 10; // coxa
                channels[1] = 9;  // femur
                channels[2] = 8;  // tibia
            }
            
            // √Åp d·ª•ng g√≥c m·ªõi tr·ª±c ti·∫øp cho servo
            for (int j = 0; j < 3; j++) {
                ServoController::setAngle(pca_id, channels[j], currentServoAngles[currentLeg][j]);
            }
            
            // Hi·ªÉn th·ªã g√≥c hi·ªán t·∫°i c·ªßa t·∫•t c·∫£ c√°c kh·ªõp
            Serial.print("G√≥c hi·ªán t·∫°i: Coxa=");
            Serial.print(currentServoAngles[currentLeg][0]);
            Serial.print("¬∞, Femur=");
            Serial.print(currentServoAngles[currentLeg][1]);
            Serial.print("¬∞, Tibia=");
            Serial.print(currentServoAngles[currentLeg][2]);
            Serial.println("¬∞");
            computeFKArray(currentLeg, 
                currentServoAngles[currentLeg][0], 
                currentServoAngles[currentLeg][1], 
                currentServoAngles[currentLeg][2]);
        }
    }
}

// S·ª≠a ƒë·ªïi h√†m chooseLeg ƒë·ªÉ th√™m t√πy ch·ªçn ch·ªçn ph∆∞∆°ng ph√°p ƒëi·ªÅu ch·ªânh
void chooseLeg()
{
    Serial.println("\n===== CH·ªåN CH√ÇN ƒê·ªÇ ƒêI·ªÄU CH·ªàNH =====");
    Serial.println("Nh·∫•n s·ªë t·ª´ 0-5 ƒë·ªÉ ch·ªçn ch√¢n t∆∞∆°ng ·ª©ng:");
    Serial.println("  0: Ch√¢n ph·∫£i-tr∆∞·ªõc");
    Serial.println("  1: Ch√¢n ph·∫£i-gi·ªØa");
    Serial.println("  2: Ch√¢n ph·∫£i-sau");
    Serial.println("  3: Ch√¢n tr√°i-tr∆∞·ªõc");
    Serial.println("  4: Ch√¢n tr√°i-gi·ªØa");
    Serial.println("  5: Ch√¢n tr√°i-sau");
    Serial.println("  q: Quay l·∫°i menu ch√≠nh");

    bool selecting = true;

    while (selecting)
    {
        while (Serial.available())
        {
            char input = Serial.read();
            switch (input)
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            {
                currentLeg = input - '0';
                Serial.print("ƒê√£ ch·ªçn ch√¢n ");
                Serial.print(currentLeg);
                Serial.println(" ƒë·ªÉ ƒëi·ªÅu ch·ªânh.");
                
                Serial.println("\nCh·ªçn ph∆∞∆°ng ph√°p ƒëi·ªÅu ch·ªânh:");
                Serial.println("  1: ƒêi·ªÅu ch·ªânh v·ªã tr√≠ (X,Y,Z)");
                Serial.println("  2: ƒêi·ªÅu ch·ªânh g√≥c servo tr·ª±c ti·∫øp");
                Serial.println("  q: Quay l·∫°i");
                
                bool choosingMethod = true;
                while (choosingMethod) {
                    if (Serial.available()) {
                        char methodInput = Serial.read();
                        switch (methodInput) {
                            case '1':
                                // ƒê·ªçc v·ªã tr√≠ hi·ªán t·∫°i c·ªßa ch√¢n t·ª´ target_x, target_y, target_z
                                {
                                    auto position = currentLegs[currentLeg].getTargetPosition();
                                    currentX = position[0];
                                    currentY = position[1];
                                    currentZ = position[2];
                                    
                                    handlePosition();
                                    choosingMethod = false;
                                }
                                break;
                            case '2':
                                // ƒê·ªçc g√≥c servo hi·ªán t·∫°i
                                {
                                    auto angles = currentLegs[currentLeg].getServoAngles();
                                    currentServoAngles[currentLeg][0] = angles[0];
                                    currentServoAngles[currentLeg][1] = angles[1];
                                    currentServoAngles[currentLeg][2] = angles[2];
                                    
                                    testServoAngles();
                                    choosingMethod = false;
                                }
                                break;
                            case 'q':
                            case 'Q':
                                choosingMethod = false;
                                break;
                            default:
                                Serial.println("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.");
                                break;
                        }
                    }
                }
            }
            break;
            case 'q':
            case 'Q':
                selecting = false;
                Serial.println("Quay l·∫°i menu ch√≠nh");
                return;
            default:
                Serial.println("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.");
                break;
            }
        }
    }
}

void moveDirection(Leg legs[], int tripod[],
                   float targetX, float targetY, float targetZ,
                   int stepDelay = 200, bool useInterpolation = true)
{
    const int UPDATE_INTERVAL = 15;
    const int STEPS = stepDelay / UPDATE_INTERVAL;
    
    // === TRIPOD 1 MOVEMENT ===
    for (int step = 0; step < STEPS; step++) {
        float t = (float)step / STEPS;
        
        for (int i = 0; i < 3; i++) {
            float x, y, z;
            createLegTrajectory(t, x, y, z);
            // Ch·ªâ d√πng elbow_up khi nh·∫•c ch√¢n
            legs[tripod[i]].setTargetPosition(x, y, z, t < 0.5f);
            legs[tripod[i]].update();
        }
        
        delay(UPDATE_INTERVAL);
    }
}

void moveLateral(Leg legs[], int tripod1[], int tripod2[],
                 float x = 225.0f, float stepHeight = 270.0f, int stepDelay = 200,
                 bool useInterpolation = true)
{

    // Th√™m c√°c tham s·ªë cho chuy·ªÉn ƒë·ªông m∆∞·ª£t m√†
    const int UPDATE_INTERVAL = 10; // C·∫≠p nh·∫≠t m·ªói 10ms ƒë·ªÉ c√≥ chuy·ªÉn ƒë·ªông m∆∞·ª£t

    // Step 1: Nh·∫•c tripod 1 l√™n
    Serial.println("  Step 1: Tripod 1 UP for lateral movement");
    for (int i = 0; i < 3; i++)
    {
        legs[tripod1[i]].setTargetPosition(225.0f, 0.0f, stepHeight);
    }

    // C·∫≠p nh·∫≠t li√™n t·ª•c ƒë·ªÉ c√≥ chuy·ªÉn ƒë·ªông m∆∞·ª£t m√†
    if (useInterpolation)
    {
        for (int t = 0; t < stepDelay; t += UPDATE_INTERVAL)
        {
            for (int i = 0; i < 3; i++)
            {
                legs[tripod1[i]].update();
            }
            delay(UPDATE_INTERVAL);
        }
    }
    else
    {
        delay(stepDelay);
    }

    // Step 2: Di chuy·ªÉn tripod 1 sang tr√°i/ph·∫£i
    Serial.println("  Step 2: Tripod 1 LATERAL movement");
    for (int i = 0; i < 3; i++)
    {
        legs[tripod1[i]].setTargetPosition(x, 0.0f, stepHeight);
    }

    // C·∫≠p nh·∫≠t li√™n t·ª•c
    if (useInterpolation)
    {
        for (int t = 0; t < stepDelay; t += UPDATE_INTERVAL)
        {
            for (int i = 0; i < 3; i++)
            {
                legs[tripod1[i]].update();
            }
            delay(UPDATE_INTERVAL);
        }
    }
    else
    {
        delay(stepDelay);
    }

    // Step 3: H·∫° tripod 1 xu·ªëng v√† nh·∫•c tripod 2 l√™n
    Serial.println("  Step 3: Tripod 1 DOWN, Tripod 2 UP");
    for (int i = 0; i < 3; i++)
    {
        legs[tripod1[i]].setTargetPosition(x, 0.0f, 0.0f);

        legs[tripod2[i]].setTargetPosition(225.0f, 0.0f, stepHeight);
    }

    // C·∫≠p nh·∫≠t li√™n t·ª•c
    if (useInterpolation)
    {
        for (int t = 0; t < stepDelay; t += UPDATE_INTERVAL)
        {
            for (int i = 0; i < 3; i++)
            {
                legs[tripod1[i]].update();
                legs[tripod2[i]].update();
            }
            delay(UPDATE_INTERVAL);
        }
    }
    else
    {
        delay(stepDelay);
    }

    // Step 4: Di chuy·ªÉn th√¢n robot (tripod 1) v√† tripod 2
    Serial.println("  Step 4: Body shift and Tripod 2 LATERAL");
    for (int i = 0; i < 3; i++)
    {
        legs[tripod1[i]].setTargetPosition(225.0f, 0.0f, 0.0f);

        legs[tripod2[i]].setTargetPosition(x, 0.0f, stepHeight);
    }

    // C·∫≠p nh·∫≠t li√™n t·ª•c
    if (useInterpolation)
    {
        for (int t = 0; t < stepDelay; t += UPDATE_INTERVAL)
        {
            for (int i = 0; i < 3; i++)
            {
                legs[tripod1[i]].update();
                legs[tripod2[i]].update();
            }
            delay(UPDATE_INTERVAL);
        }
    }
    else
    {
        delay(stepDelay);
    }

    // Step 5: H·∫° tripod 2 xu·ªëng
    Serial.println("  Step 5: Tripod 2 DOWN");
    for (int i = 0; i < 3; i++)
    {
        legs[tripod2[i]].setTargetPosition(x, 0.0f, 0.0f);
    }

    // C·∫≠p nh·∫≠t li√™n t·ª•c
    if (useInterpolation)
    {
        for (int t = 0; t < stepDelay; t += UPDATE_INTERVAL)
        {
            for (int i = 0; i < 3; i++)
            {
                legs[tripod2[i]].update();
            }
            delay(UPDATE_INTERVAL);
        }
    }
    else
    {
        delay(stepDelay);
    }
}

// H√†m t√≠nh to√°n gi√° tr·ªã Y ƒë√£ ƒëi·ªÅu ch·ªânh cho vi·ªác r·∫Ω
float calculateTurnAdjustment(float y, int legIndex, float turnFactor = 0.0f) 
{
    const float DEADZONE = 20.0f;   // Gi·ªõi h·∫°n d∆∞·ªõi cho hi·ªáu ch·ªânh r·∫Ω
    float adjusted_y = y;

    // Ch·ªâ √°p d·ª•ng hi·ªáu ch·ªânh n·∫øu c√≥ turnFactor ho·∫∑c y ƒë·ªß l·ªõn (ƒëang r·∫Ω)
    if (abs(turnFactor) > DEADZONE || abs(y) > DEADZONE) 
    {
        // X√°c ƒë·ªãnh h·ªá s·ªë ƒëi·ªÅu ch·ªânh d·ª±a tr√™n h∆∞·ªõng v√† v·ªã tr√≠ ch√¢n
        bool isRightLeg = (legIndex < 3); // 0, 1, 2 l√† ch√¢n ph·∫£i
        bool isTurningRight;
        
        // N·∫øu c√≥ turnFactor ri√™ng, d√πng n√≥ ƒë·ªÉ x√°c ƒë·ªãnh h∆∞·ªõng r·∫Ω
        if (abs(turnFactor) > DEADZONE) {
            isTurningRight = (turnFactor > 0);
        } else {
            // Ng∆∞·ª£c l·∫°i, d√πng y (c√°ch c≈©)
            isTurningRight = (y < 0);
        }

        // Khi r·∫Ω ph·∫£i, ch√¢n tr√°i b∆∞·ªõc d√†i h∆°n v√† ng∆∞·ª£c l·∫°i
        if ((isRightLeg && !isTurningRight) || (!isRightLeg && isTurningRight)) 
        {
            adjusted_y *= 1.3f; // B∆∞·ªõc d√†i h∆°n
        } 
        else 
        {
            adjusted_y *= 0.75f; // B∆∞·ªõc ng·∫Øn h∆°n
        }
        
        // N·∫øu c√≥ turnFactor, √°p d·ª•ng th√™m v√†o y
        if (abs(turnFactor) > DEADZONE) {
            adjusted_y += turnFactor;
        }
    }

    return adjusted_y;
}

void moveForward(Leg legs[], int tripod1[], int tripod2[])
{
    // Step 2: Tripod 1 FORWARD
    Serial.println("  Step 2: Tripod 1 FORWARD");
    for (int i = 0; i < 3; i++)
    {
        if (tripod1[i] < 3)
        {
            legs[tripod1[i]].setTargetPosition(225.0f, -150.0f, 270.0f); // SAME as case '6' step 2
        }
        else
        {
            legs[tripod1[i]].setTargetPosition(225.0f, -150.0f, 270.0f); // SAME as case '6' step 2
        }
        legs[tripod1[i]].update();
    }
    delay(600);

    // Step 3: Tripod 1 DOWN
    Serial.println("  Step 3: Tripod 1 DOWN");
    for (int i = 0; i < 3; i++)
    {
        legs[tripod1[i]].setTargetPosition(225.0f, -150.0f, 0.0f); // SAME as case '6' step 3
        legs[tripod1[i]].update();
        // legs[tripod2[i]].setTargetPosition(225.0f, 0.0f, 270.0f,true); // SAME as case '6' step 3
        // legs[tripod2[i]].update();
    }
    delay(600);

    // Step 4: Tripod 1 BACKWARD (body moves forward)
    Serial.println("  Step 4: Tripod 1 BACKWARD");
    for (int i = 0; i < 3; i++)
    {
        legs[tripod1[i]].setTargetPosition(225.0f, 0.0f, 0.0f); // SAME as case '6' step 4
        legs[tripod1[i]].update();
    }
}

void turnRobot(Leg legs[], int tripod1[], int tripod2[], float turnFactor, int stepDelay = 200, bool useInterpolation = true)
{
    const int UPDATE_INTERVAL = 10;
    const float TURN_STRIDE = 100.0f; // Bi√™n ƒë·ªô r·∫Ω c∆° b·∫£n
    const float STEP_HEIGHT = 270.0f;
    const float BASE_X = 225.0f;
    
    // X√°c ƒë·ªãnh h∆∞·ªõng r·∫Ω
    bool isTurningRight = (turnFactor > 0);
    float magnitude = min(abs(turnFactor), 1.0f); // Gi·ªõi h·∫°n trong kho·∫£ng [0, 1]
    
    // T√≠nh to√°n c√°c offset c∆° b·∫£n cho to√†n b·ªô h√†m
    float offsetRight = isTurningRight ? -TURN_STRIDE * magnitude : TURN_STRIDE * magnitude;
    float offsetLeft = -offsetRight; // Ng∆∞·ª£c d·∫•u v·ªõi offsetRight
    
    Serial.print("TURNING ");
    Serial.print(isTurningRight ? "RIGHT" : "LEFT");
    Serial.print(" with magnitude: ");
    Serial.println(magnitude);
    
    // B∆Ø·ªöC 1: Nh·∫•c c√°c ch√¢n tripod1 l√™n
    Serial.println("  Step 1: Tripod 1 UP");
    for (int i = 0; i < 3; i++) {
        legs[tripod1[i]].setTargetPosition(BASE_X, 0.0f, STEP_HEIGHT);
        legs[tripod1[i]].update();
    }
    
    if (useInterpolation) {
        for (int t = 0; t < stepDelay; t += UPDATE_INTERVAL) {
            delay(UPDATE_INTERVAL);
        }
    } else {
        delay(stepDelay);
    }
    
    // B∆Ø·ªöC 2: Di chuy·ªÉn c√°c ch√¢n tripod1 sang ngang (ng∆∞·ª£c h∆∞·ªõng r·∫Ω)
    Serial.println("  Step 2: Tripod 1 ROTATE");
    for (int i = 0; i < 3; i++) {
        int legId = tripod1[i];
        bool isRightLeg = (legId < 3);
        bool isFrontLeg = (legId == 0 || legId == 3);
        bool isMiddleLeg = (legId == 1 || legId == 4);
        
        // ƒêi·ªÅu ch·ªânh t·ª∑ l·ªá d·ª±a tr√™n v·ªã tr√≠ ch√¢n
        float scaleFactor = 1.0f;
        if (isMiddleLeg) scaleFactor = 0.6f; // Ch√¢n gi·ªØa quay √≠t h∆°n
        if (!isFrontLeg && !isMiddleLeg) scaleFactor = 0.8f; // Ch√¢n sau quay √≠t h∆°n ch√¢n tr∆∞·ªõc
        
        // T√≠nh to√°n offset chuy·ªÉn ƒë·ªông cho t·ª´ng ch√¢n
        float yOffset = isRightLeg ? 
            offsetRight * scaleFactor : 
            offsetLeft * scaleFactor;
        
        // ƒêi·ªÅu ch·ªânh X ƒë·ªÉ t·∫°o g√≥c r·∫Ω t·ª± nhi√™n h∆°n
        float xOffset = 0.0f;
        if ((isRightLeg && isTurningRight) || (!isRightLeg && !isTurningRight)) {
            // Ch√¢n b√™n ngo√†i v√≤ng quay: di chuy·ªÉn ra ngo√†i h∆°n
            xOffset = 15.0f * magnitude;
        } else {
            // Ch√¢n b√™n trong v√≤ng quay: di chuy·ªÉn v√†o trong h∆°n
            xOffset = -10.0f * magnitude;
        }
        
        legs[legId].setTargetPosition(BASE_X + xOffset, yOffset, STEP_HEIGHT);
        legs[legId].update();
    }
    
    // C√°c b∆∞·ªõc ti·∫øp theo t∆∞∆°ng t·ª±...
    if (useInterpolation) {
        for (int t = 0; t < stepDelay; t += UPDATE_INTERVAL) {
            delay(UPDATE_INTERVAL);
        }
    } else {
        delay(stepDelay);
    }
    
    // B∆Ø·ªöC 3: H·∫° c√°c ch√¢n tripod1 xu·ªëng
    Serial.println("  Step 3: Tripod 1 DOWN");
    for (int i = 0; i < 3; i++) {
        int legId = tripod1[i];
        bool isRightLeg = (legId < 3);
        bool isFrontLeg = (legId == 0 || legId == 3);
        bool isMiddleLeg = (legId == 1 || legId == 4);
        
        // S·ª≠ d·ª•ng c√πng ph∆∞∆°ng ph√°p t√≠nh to√°n nh∆∞ B∆∞·ªõc 2
        float scaleFactor = 1.0f;
        if (isMiddleLeg) scaleFactor = 0.6f;
        if (!isFrontLeg && !isMiddleLeg) scaleFactor = 0.8f;
        
        float yOffset = isRightLeg ? 
            offsetRight * scaleFactor : 
            offsetLeft * scaleFactor;
        
        float xOffset = 0.0f;
        if ((isRightLeg && isTurningRight) || (!isRightLeg && !isTurningRight)) {
            xOffset = 15.0f * magnitude;
        } else {
            xOffset = -10.0f * magnitude;
        }
        
        legs[legId].setTargetPosition(BASE_X + xOffset, yOffset, 0.0f);
        legs[legId].update();
    }
    
    if (useInterpolation) {
        for (int t = 0; t < stepDelay; t += UPDATE_INTERVAL) {
            delay(UPDATE_INTERVAL);
        }
    } else {
        delay(stepDelay);
    }
    
    // B∆Ø·ªöC 4: Nh·∫•c c√°c ch√¢n tripod2 l√™n
    Serial.println("  Step 4: Tripod 2 UP");
    for (int i = 0; i < 3; i++) {
        legs[tripod2[i]].setTargetPosition(BASE_X, 0.0f, STEP_HEIGHT);
        legs[tripod2[i]].update();
    }
    
    if (useInterpolation) {
        for (int t = 0; t < stepDelay; t += UPDATE_INTERVAL) {
            delay(UPDATE_INTERVAL);
        }
    } else {
        delay(stepDelay);
    }
    
    // B∆Ø·ªöC 5: Di chuy·ªÉn c√°c ch√¢n tripod2 sang ngang (ng∆∞·ª£c h∆∞·ªõng r·∫Ω)
    Serial.println("  Step 5: Tripod 2 ROTATE");
    for (int i = 0; i < 3; i++) {
        bool isRightLeg = (tripod2[i] < 3);
        float yOffset = isRightLeg ? offsetRight : offsetLeft;
        legs[tripod2[i]].setTargetPosition(BASE_X, yOffset, STEP_HEIGHT);
        legs[tripod2[i]].update();
    }
    
    if (useInterpolation) {
        for (int t = 0; t < stepDelay; t += UPDATE_INTERVAL) {
            delay(UPDATE_INTERVAL);
        }
    } else {
        delay(stepDelay);
    }
    
    // B∆Ø·ªöC 6: H·∫° c√°c ch√¢n tripod2 xu·ªëng
    Serial.println("  Step 6: Tripod 2 DOWN");
    for (int i = 0; i < 3; i++) {
        bool isRightLeg = (tripod2[i] < 3);
        float yOffset = isRightLeg ? offsetRight : offsetLeft;
        legs[tripod2[i]].setTargetPosition(BASE_X, yOffset, 0.0f);
        legs[tripod2[i]].update();
    }
    
    if (useInterpolation) {
        for (int t = 0; t < stepDelay; t += UPDATE_INTERVAL) {
            delay(UPDATE_INTERVAL);
        }
    } else {
        delay(stepDelay);
    }
    
    // B∆Ø·ªöC 7: ƒê∆∞a t·∫•t c·∫£ c√°c ch√¢n v·ªÅ v·ªã tr√≠ trung t√¢m
    Serial.println("  Step 7: All legs to center");
    for (int i = 0; i < 6; i++) {
        legs[i].setTargetPosition(BASE_X, 0.0f, 0.0f);
        legs[i].update();
    }
    
    if (useInterpolation) {
        for (int t = 0; t < stepDelay; t += UPDATE_INTERVAL) {
            delay(UPDATE_INTERVAL);
        }
    } else {
        delay(stepDelay);
    }
}


void moveWithJoystick(float joystickX, float joystickY, bool continuous = false)
{
    // √Åp d·ª•ng deadzone
    const float DEADZONE = 0.1f;
    if (abs(joystickX) < DEADZONE)
        joystickX = 0.0f;
    if (abs(joystickY) < DEADZONE)
        joystickY = 0.0f;

    // B·ªè qua n·∫øu joystick ·ªü v√πng deadzone
    if (joystickX == 0.0f && joystickY == 0.0f)
    {
        if (!continuous)
        {
            goHome();
        }
        return;
    }

    // T·∫°o ch√¢n cho hexapod
    static Leg legs[6] = {
        Leg(0, 0, 2, 1, 0),  // Leg 0
        Leg(1, 0, 6, 5, 4),  // Leg 1
        Leg(2, 0, 10, 9, 8), // Leg 2
        Leg(3, 1, 2, 1, 0),  // Leg 3
        Leg(4, 1, 6, 5, 4),  // Leg 4
        Leg(5, 1, 10, 9, 8)  // Leg 5
    };

    // ƒê·ªãnh nghƒ©a tripods
    static int tripod1[] = {0, 2, 4};
    static int tripod2[] = {1, 3, 5};

    // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã joystick th√†nh tham s·ªë di chuy·ªÉn
    const float STRIDE_LENGTH = 70.0f; // B∆∞·ªõc ch√¢n t·ªëi ƒëa (mm)
    const float STEP_HEIGHT = 56.29f;   // ƒê·ªô cao b∆∞·ªõc ch√¢n (mm)
    const float BASE_X = 179.44f;        // V·ªã tr√≠ X m·∫∑c ƒë·ªãnh (mm)
    const float LATERAL_MOVE = 80.0f;   // Ph·∫°m vi di chuy·ªÉn ngang t·ªëi ƒëa (mm)

    // ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô d·ª±a tr√™n m·ª©c ƒë·ªô nghi√™ng c·ªßa joystick
    float speedFactor = max(abs(joystickX), abs(joystickY));
    float minDelay = 200; // T·ªëc ƒë·ªô t·ªëi ƒëa
    float maxDelay = 400; // T·ªëc ƒë·ªô t·ªëi thi·ªÉu
    float baseStepDelay = maxDelay - speedFactor * (maxDelay - minDelay);

    // X√°c ƒë·ªãnh h∆∞·ªõng di chuy·ªÉn ch·ªß ƒë·∫°o
    float absX = abs(joystickX);
    float absY = abs(joystickY);
    
    // Bi·∫øn static ri√™ng cho m·ªói ch·∫ø ƒë·ªô
    static bool firstTripodActiveForward = true;
    static bool firstTripodActiveLateral = true;

    // Debug
    Serial.print("Speed: ");
    Serial.print(speedFactor);
    Serial.print(", Delay: ");
    Serial.println(baseStepDelay);

    // X√°c ƒë·ªãnh ch·∫ø ƒë·ªô di chuy·ªÉn
    // 0: ti·∫øn/l√πi, 1: r·∫Ω tr√°i/ph·∫£i, 2: di chuy·ªÉn ngang
    int moveMode;
    
    if (absY > absX * 1.5) {
        moveMode = 0; // Ti·∫øn/l√πi
    } else if (absX > absY * 1.5) {
        moveMode = 1; // R·∫Ω tr√°i/ph·∫£i
    } else {
        moveMode = 2; // Di chuy·ªÉn ngang (lateral)
    }

    // Ch·∫ø ƒë·ªô ti·∫øn/l√πi
    if (moveMode == 0)
    {
        // Ch·∫ø ƒë·ªô ti·∫øn/l√πi (kh√¥ng c√≥ r·∫Ω)
        float y = -joystickY * STRIDE_LENGTH; // Ng∆∞·ª£c d·∫•u: joystick -Y = ti·∫øn t·ªõi
        float stepDelay = baseStepDelay;

        // Ghi log
        Serial.print("Forward/Backward: Y=");
        Serial.println(joystickY);

        // Th·ª±c hi·ªán di chuy·ªÉn ti·∫øn/l√πi
        if (firstTripodActiveForward)
        {
            moveDirection(legs, tripod1, BASE_X, y, STEP_HEIGHT, stepDelay, true);
            firstTripodActiveForward = false;
        }
        else
        {
            moveDirection(legs, tripod2, BASE_X, y, STEP_HEIGHT, stepDelay, true);
            firstTripodActiveForward = true;
        }
    }
    // Ch·∫ø ƒë·ªô r·∫Ω tr√°i/ph·∫£i
    else if (moveMode == 1)
    {
        // Ch·∫ø ƒë·ªô r·∫Ω (quay)
        float turnFactor = joystickX; // -1 to 1
        float stepDelay = baseStepDelay;

        // Ghi log
        Serial.print("Turning: X=");
        Serial.println(joystickX);

        // Th·ª±c hi·ªán chuy·ªÉn ƒë·ªông quay
        if (firstTripodActiveForward)
        {
            turnRobot(legs, tripod1, tripod2, turnFactor, stepDelay, true);
            firstTripodActiveForward = false;
        }
        else
        {
            turnRobot(legs, tripod2, tripod1, turnFactor, stepDelay, true);
            firstTripodActiveForward = true;
        }
    }
    // Ch·∫ø ƒë·ªô di chuy·ªÉn ngang
    else if (moveMode == 2)
    {
        // Ch·∫ø ƒë·ªô di chuy·ªÉn ngang (tr√°i/ph·∫£i)
        float x = BASE_X + (joystickX * LATERAL_MOVE);
        float stepDelay = baseStepDelay;

        // Ghi log
        Serial.print("Lateral movement: X=");
        Serial.println(joystickX);

        // Th·ª±c hi·ªán di chuy·ªÉn ngang
        if (firstTripodActiveLateral)
        {
            moveLateral(legs, tripod1, tripod2, x, STEP_HEIGHT, stepDelay);
            firstTripodActiveLateral = false;
        }
        else
        {
            moveLateral(legs, tripod2, tripod1, x, STEP_HEIGHT, stepDelay);
            firstTripodActiveLateral = true;
        }
    }
}

// void controlBodyTilt(float joystickX, float joystickY) {
//     // B·ªè qua n·∫øu joystick ·ªü v√πng deadzone
//     if (abs(joystickX) < 0.1f && abs(joystickY) < 0.1f) {
//         return;
//     }

//     // T·∫°o ch√¢n v√† offset height
//     const float MAX_TILT = 50.0f;       // ƒê·ªô nghi√™ng t·ªëi ƒëa (mm)
//     const float BASE_HEIGHT = 0.0f;     // Chi·ªÅu cao m·∫∑c ƒë·ªãnh (mm)
//     const float BASE_X = 225.0f;        // V·ªã tr√≠ X m·∫∑c ƒë·ªãnh (mm)

//     // T√≠nh to√°n ƒë·ªô cao cho t·ª´ng ch√¢n
//     float heights[6] = {0}; // 6 gi√° tr·ªã chi·ªÅu cao

//     // Nghi√™ng tr∆∞·ªõc/sau: ch√¢n tr∆∞·ªõc v√† sau c√≥ chi·ªÅu cao kh√°c nhau
//     float frontBack = -joystickY * MAX_TILT; // ƒê·∫£o d·∫•u: -Y = nghi√™ng v·ªÅ ph√≠a tr∆∞·ªõc

//     // Nghi√™ng tr√°i/ph·∫£i: ch√¢n tr√°i v√† ph·∫£i c√≥ chi·ªÅu cao kh√°c nhau
//     float leftRight = joystickX * MAX_TILT;

//     // T√≠nh chi·ªÅu cao cho t·ª´ng ch√¢n
//     // Ch√¢n 0: ph·∫£i-tr∆∞·ªõc, 1: ph·∫£i-gi·ªØa, 2: ph·∫£i-sau
//     // Ch√¢n 3: tr√°i-tr∆∞·ªõc, 4: tr√°i-gi·ªØa, 5: tr√°i-sau

//     // Ph√≠a tr∆∞·ªõc (0, 3)
//     heights[0] = BASE_HEIGHT + frontBack - leftRight;
//     heights[3] = BASE_HEIGHT + frontBack + leftRight;

//     // Ph√≠a gi·ªØa (1, 4)
//     heights[1] = BASE_HEIGHT - leftRight;
//     heights[4] = BASE_HEIGHT + leftRight;

//     // Ph√≠a sau (2, 5)
//     heights[2] = BASE_HEIGHT - frontBack - leftRight;
//     heights[5] = BASE_HEIGHT - frontBack + leftRight;

//     // √Åp d·ª•ng v·ªã tr√≠ cho t·∫•t c·∫£ c√°c ch√¢n
//     for (int i = 0; i < 6; i++) {
//         currentLegs[i].setTargetPosition(BASE_X, 0.0f, heights[i]);
//         currentLegs[i].update();
//     }
// }

void handleBLECommand(char input)
{
    Serial.print("BLE Command: ");
    Serial.println(input);

    switch (input)
    {
    case 'r':
        Serial.println("L·ªánh: V·ªÅ home position");
        goHome();
        break;
    case 'j':
        Serial.println("L·ªánh: Test leg forward");
        testLegForward();
        break;
    case 'm':
        Serial.println("L·ªánh: Test tripod gait");
        testTripodGait();
        break;
    case 'h':
        Serial.println("L·ªánh: Ch·ªçn ch√¢n ƒë·ªÉ ƒëi·ªÅu ch·ªânh");
        chooseLeg();
        break;
    case 'J': // Nh·∫≠n d·ªØ li·ªáu joystick
        if (ble.hasJoystickData())
        {
            float joyX = ble.getJoystickX();
            float joyY = ble.getJoystickY();
            moveWithJoystick(joyX, joyY);
        }
        break;
    default:
        Serial.println("L·ªánh kh√¥ng h·ª£p l·ªá! Nh·∫•n 'h' ƒë·ªÉ hi·ªÉn th·ªã tr·ª£ gi√∫p.");
        break;
    }
}

/**
 * Gi·∫£ l·∫≠p ƒëi·ªÅu khi·ªÉn joystick v·ªõi nhi·ªÅu h∆∞·ªõng di chuy·ªÉn
 * Th·ª≠ nghi·ªám robot di chuy·ªÉn theo 8 h∆∞·ªõng c∆° b·∫£n
 */
void testJoystickSimulation()
{
    Serial.println("\n=== JOYSTICK SIMULATION TEST ===");
    Serial.println("Testing movement in different directions");
    Serial.println("Press any key to start...");

    while (!Serial.available())
        delay(100);
    Serial.read();
    while (Serial.available())
        Serial.read();

    // Kh·ªüi t·∫°o c√°c ch√¢n
    Leg legs[6] = {
        Leg(0, 0, 2, 1, 0),  // Leg 0
        Leg(1, 0, 6, 5, 4),  // Leg 1
        Leg(2, 0, 10, 9, 8), // Leg 2
        Leg(3, 1, 2, 1, 0),  // Leg 3
        Leg(4, 1, 6, 5, 4),  // Leg 4
        Leg(5, 1, 10, 9, 8)  // Leg 5
    };

    int tripod1[] = {0, 2, 4};
    int tripod2[] = {1, 3, 5};

    // C√°c tr∆∞·ªùng h·ª£p ki·ªÉm tra v·ªõi c√°c t·ªça ƒë·ªô (x, y) kh√°c nhau
    struct TestCase
    {
        const char *name;
        float x;
        float y;
        int cycles;
    };

    TestCase testCases[] = {
        {"FORWARD", 225.0f, -150.0f, 3},       // Ti·∫øn
        {"BACKWARD", 225.0f, 150.0f, 3},       // L√πi
        {"LEFT TURN", 225.0f, 100.0f, 4},      // R·∫Ω tr√°i
        {"RIGHT TURN", 225.0f, -100.0f, 4},    // R·∫Ω ph·∫£i
        {"FORWARD LEFT", 235.0f, -75.0f, 3},   // Ti·∫øn-tr√°i
        {"FORWARD RIGHT", 235.0f, -225.0f, 3}, // Ti·∫øn-ph·∫£i
        {"BACKWARD LEFT", 235.0f, 225.0f, 3},  // L√πi-tr√°i
        {"BACKWARD RIGHT", 235.0f, 75.0f, 3}   // L√πi-ph·∫£i
    };

    // Test t·ª´ng tr∆∞·ªùng h·ª£p
    for (const auto &test : testCases)
    {
        Serial.print("\n\nüö∂ TESTING ");
        Serial.print(test.name);
        Serial.println(" MOVEMENT:");
        Serial.print("  X = ");
        Serial.print(test.x);
        Serial.print(", Y = ");
        Serial.print(test.y);
        Serial.print(", Cycles = ");
        Serial.println(test.cycles);

        // Tr·ªü v·ªÅ v·ªã tr√≠ home tr∆∞·ªõc khi test h∆∞·ªõng m·ªõi
        goHome();
        delay(1000);

        // Th·ª±c hi·ªán s·ªë chu k·ª≥ b∆∞·ªõc ch√¢n
        for (int cycle = 0; cycle < test.cycles; cycle++)
        {
            Serial.print("  Cycle ");
            Serial.print(cycle + 1);
            Serial.print(" of ");
            Serial.println(test.cycles);

            // Di chuy·ªÉn s·ª≠ d·ª•ng tripod gait
            moveDirection(legs, tripod1, tripod2, test.x, test.y, 56.29f, 200, true);
            delay(100);
            moveDirection(legs, tripod2, tripod1, test.x, test.y, 56.29f, 200, true);
            delay(100);
        }

        Serial.print("‚úÖ ");
        Serial.print(test.name);
        Serial.println(" test completed!");

        // D·ª´ng tr∆∞·ªõc khi chuy·ªÉn sang h∆∞·ªõng ti·∫øp theo
        Serial.println("Press any key for next direction...");
        while (!Serial.available())
            delay(100);
        Serial.read();
        while (Serial.available())
            Serial.read();
    }

    // Quay v·ªÅ v·ªã tr√≠ home khi ho√†n th√†nh
    goHome();
    Serial.println("\nüéâ JOYSTICK SIMULATION TEST COMPLETED! üéâ");
}

void setup()
{
    Serial.begin(115200);
    ble.init("Hexapod_BLE");
    ble.enableAutoConnect(true);
    ble.setCommandHandler(handleBLECommand);

    ServoController::initialize();
    delay(1000);

    // Set all servos to 90¬∞ initially
    goHome();
    // delay(1000);
    // testLegForward();

    // Leg legs[6] = {
    //     Leg(0, 0, 2, 1, 0),  // Leg 0
    //     Leg(1, 0, 6, 5, 4),  // Leg 1
    //     Leg(2, 0, 10, 9, 8), // Leg 2
    // };

    // int tripod1[] = {0, 2, 4};
    // for (int i = 0; i < 3; i++)
    // {
    //     if (i < 2)
    //         legs[tripod1[i]].setTargetPosition(150.0f, 0.0f, 300.0f,true); // SAME as case '6' step 1
    //     else
    //         legs[tripod1[i]].setTargetPosition(250.0f, 0.0f, 300.0f,true); // SAME as case '6' step 1
    //     legs[tripod1[i]].update();
    // }
}

void loop()
{
    ble.loop();

    static unsigned long lastStatusUpdate = 0;
    if (millis() - lastStatusUpdate > 10000)
    { // M·ªói 10 gi√¢y
        if (ble.isConnected())
        {
            // G·ª≠i th√¥ng b√°o tr·∫°ng th√°i khi ƒë√£ k·∫øt n·ªëi
            ble.sendMessage("STATUS:CONNECTED");
        }
        lastStatusUpdate = millis();
    }

    // X·ª≠ l√Ω d·ªØ li·ªáu joystick theo th·ªùi gian th·ª±c
    static unsigned long lastJoystickUpdate = 0;
    static unsigned long lastJoystickActivity = 0;
    static bool isMoving = false;
    if (ble.hasJoystickData() && millis() - lastJoystickUpdate > 50)
    { // TƒÉng l√™n 2Hz
        float joyX = ble.getJoystickX();
        float joyY = ble.getJoystickY();

        // Debug
        if (abs(joyX) > 0.1f || abs(joyY) > 0.1f)
        {
            Serial.print("Joy: X=");
            Serial.print(joyX);
            Serial.print(", Y=");
            Serial.println(joyY);
            // ƒê√°nh d·∫•u robot ƒëang di chuy·ªÉn
            isMoving = true;
            lastJoystickActivity = millis();
        }
        else if (isMoving)
        {
            // D·ª´ng robot khi joystick v·ªÅ trung t√¢m
            Serial.println("Joystick centered, stopping movement");
            goHome();
            isMoving = false;
        }

        // Di chuy·ªÉn robot theo joystick
        moveWithJoystick(joyX, joyY, false);
        lastJoystickUpdate = millis();
    }

    // Ki·ªÉm tra timeout: n·∫øu kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu trong 500ms v√† robot ƒëang di chuy·ªÉn
    if (isMoving && (millis() - lastJoystickActivity > 300))
    {
        Serial.println("Joystick timeout, stopping movement");
        goHome();
        isMoving = false;
    }

    // X·ª≠ l√Ω l·ªánh ƒë∆°n k√Ω t·ª± (cho c√°c ch·ª©c nƒÉng kh√°c)
    if (ble.hasCommand())
    {
        char cmd = ble.getCommand();
        if (cmd != 0)
        {
            handleBLECommand(cmd);
        }
    }

    // X·ª≠ l√Ω l·ªánh t·ª´ Serial (debugging)
    if (Serial.available())
    {
        char input = Serial.read();
        handleBLECommand(input);
    }

    // X·ª≠ l√Ω l·ªánh t·ª´ Serial console (cho debugging)

    // if (Serial.available())
    // {
    //     char input = Serial.read();
    //     handleBLECommand(input);
    // }
    // Leg legs[6] = {
    //     Leg(0, 0, 2, 1, 0),  // Leg 0
    //     Leg(1, 0, 6, 5, 4),  // Leg 1
    //     Leg(2, 0, 10, 9, 8), // Leg 2
    //     Leg(3, 1, 2, 1, 0),  // Leg 3
    //     Leg(4, 1, 6, 5, 4),  // Leg 4
    //     Leg(5, 1, 10, 9, 8)  // Leg 5
    // };

    // int tripod1[] = {0, 2, 4};
    // int tripod2[] = {1, 3, 5};
    // moveForward(legs, tripod1, tripod2);
    // delay(200);
    // moveForward(legs, tripod2, tripod1);
    // delay(200);
    // testJoystickSimulation();
}

void createLegTrajectory(float t, float& x, float& y, float& z) {
    // t: tham s·ªë t·ª´ 0.0 ƒë·∫øn 1.0 (ti·∫øn tr√¨nh c·ªßa chuy·ªÉn ƒë·ªông)
    // Qu·ªπ ƒë·∫°o h√¨nh b√°n nguy·ªát khi nh·∫•c ch√¢n
    
    const float HOME_X = 198.5f;
    const float HOME_Y = 0.0f; 
    const float HOME_Z = -50.1f;
    
    const float STRIDE_LENGTH = 150.0f;  // ƒê·ªô d√†i b∆∞·ªõc ch√¢n
    const float LIFT_HEIGHT = 56.29f;   // ƒê·ªô cao nh·∫•c ch√¢n t·ªëi ƒëa
    const float X_RETRACTION = 19.06f;  // M·ª©c thu ch√¢n v√†o khi nh·∫•c
    
    if (t < 0.5f) {
        // N·ª≠a ƒë·∫ßu: Nh·∫•c ch√¢n l√™n v√† di chuy·ªÉn v·ªÅ ph√≠a tr∆∞·ªõc
        float phase = t * 2.0f; // 0 -> 1
        
        // Qu·ªπ ƒë·∫°o h√¨nh sin cho Z (nh·∫•c l√™n)
        float liftFactor = sin(phase * M_PI);
        
        // X co v√†o khi nh·∫•c l√™n cao nh·∫•t, sau ƒë√≥ du·ªói ra
        float xFactor = sin(phase * M_PI);
        
        // Y di chuy·ªÉn ti·∫øn t·ªõi m·ª•c ti√™u
        float yFactor = phase;
        
        x = HOME_X - X_RETRACTION * xFactor;
        y = HOME_Y - STRIDE_LENGTH * yFactor;
        z = HOME_Z + LIFT_HEIGHT * liftFactor;
    } else {
        // N·ª≠a sau: H·∫° ch√¢n xu·ªëng v√† di chuy·ªÉn th√¢n robot
        float phase = (t - 0.5f) * 2.0f; // 0 -> 1
        
        // Ch√¢n ƒë√£ ·ªü ph√≠a tr∆∞·ªõc, gi·ªù k√©o th√¢n robot ti·∫øn l√™n
        x = HOME_X - X_RETRACTION * (1.0f - phase);
        y = HOME_Y - STRIDE_LENGTH * (1.0f - phase);
        z = HOME_Z; // Ch√¢n ƒë√£ ƒë∆∞·ª£c h·∫° xu·ªëng
    }
}

// Bezier b·∫≠c 3 (cubic)
float bezier(float t, float p0, float p1, float p2, float p3) {
    float t2 = t * t;
    float t3 = t2 * t;
    return p0 * (1 - 3*t + 3*t2 - t3) + 
           p1 * (3*t - 6*t2 + 3*t3) + 
           p2 * (3*t2 - 3*t3) + 
           p3 * t3;
}

void createSmoothTrajectory(float t, float& x, float& y, float& z) {
    // ƒêi·ªÉm ki·ªÉm so√°t cho ƒë∆∞·ªùng cong
    const float HOME_X = 198.5f;
    const float HOME_Y = 0.0f;
    const float HOME_Z = -50.1f;
    
    // ƒêi·ªÉm ki·ªÉm so√°t cho X (co v√†o khi nh·∫•c)
    float x0 = HOME_X;         // B·∫Øt ƒë·∫ßu
    float x1 = HOME_X - 5.0f; // ƒêi·ªÉm ki·ªÉm so√°t 1
    float x2 = HOME_X - 10.0f; // ƒêi·ªÉm ki·ªÉm so√°t 2
    float x3 = HOME_X;         // K·∫øt th√∫c (v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu)
    
    // ƒêi·ªÉm ki·ªÉm so√°t cho Y (di chuy·ªÉn v·ªÅ ph√≠a tr∆∞·ªõc)
    float y0 = HOME_Y;            // B·∫Øt ƒë·∫ßu
    float y1 = HOME_Y - 20.0f;    // ƒêi·ªÉm ki·ªÉm so√°t 1
    float y2 = HOME_Y - 50.0f;    // ƒêi·ªÉm ki·ªÉm so√°t 2
    float y3 = HOME_Y - 83.68f;    // K·∫øt th√∫c (v·ªÅ ph√≠a tr∆∞·ªõc)
    
    // ƒêi·ªÉm ki·ªÉm so√°t cho Z (nh·∫•c l√™n v√† h·∫° xu·ªëng)
    float z0 = HOME_Z;              // B·∫Øt ƒë·∫ßu
    float z1 = HOME_Z + 40.0f;      // ƒêi·ªÉm ki·ªÉm so√°t 1 (h∆∞·ªõng l√™n)
    float z2 = HOME_Z + 80.0f;      // ƒêi·ªÉm ki·ªÉm so√°t 2 (cao nh·∫•t)
    float z3 = HOME_Z;              // K·∫øt th√∫c (h·∫° xu·ªëng)

    // T√≠nh t·ªça ƒë·ªô X, Y, Z tr√™n ƒë∆∞·ªùng cong Bezier
    if (t < 0.5f) {
        // Pha nh·∫•c ch√¢n (n·ª≠a ƒë·∫ßu ti√™n)
        float phase = t * 2.0f; // Chu·∫©n h√≥a 0->1
        x = bezier(phase, x0, x1, x2, x3);
        y = bezier(phase, y0, y1, y2, y3);
        z = bezier(phase, z0, z1, z2, z3);
    } else {
        // Pha k√©o th√¢n (n·ª≠a sau)
        float phase = (t - 0.5f) * 2.0f; // Chu·∫©n h√≥a 0->1
        x = HOME_X;
        y = HOME_Y - 70.0f + phase * 70.0f;
        z = HOME_Z;
    }
}

void createBioinspiredTrajectory(float t, float& x, float& y, float& z) {
    const float HOME_X = 198.5f;
    const float HOME_Y = 0.0f;
    const float HOME_Z = -50.1f;
    
    const float STRIDE_LENGTH = 70.0f;
    const float LIFT_HEIGHT = 56.29f;
    
    if (t < 0.3f) {
        // Pha 1: Nh·∫•c nhanh (30% chu k·ª≥)
        float phase = t / 0.3f;
        
        // Nh·∫•c ch√¢n theo ƒë∆∞·ªùng cong: co v√†o v√† l√™n
        x = HOME_X - 20.0f * sin(phase * M_PI_2);
        z = HOME_Z + LIFT_HEIGHT * sin(phase * M_PI_2);
        y = HOME_Y - STRIDE_LENGTH * 0.3f * phase; // Di chuy·ªÉn nh·∫π v·ªÅ ph√≠a tr∆∞·ªõc
    }
    else if (t < 0.5f) {
        // Pha 2: Di chuy·ªÉn v·ªÅ ph√≠a tr∆∞·ªõc (20% chu k·ª≥)
        float phase = (t - 0.3f) / 0.2f;
        
        // Gi·ªØ ch√¢n ·ªü ƒë·ªô cao t·ªëi ƒëa, ƒë∆∞a v·ªÅ ph√≠a tr∆∞·ªõc
        x = HOME_X - 20.0f * cos(phase * M_PI_2);

        z = HOME_Z + LIFT_HEIGHT;
        y = HOME_Y - STRIDE_LENGTH * (0.3f + 0.7f * phase);
    }
    else if (t < 0.6f) {
        // Pha 3: H·∫° xu·ªëng (10% chu k·ª≥)
        float phase = (t - 0.5f) / 0.1f;
        
        // H·∫° ch√¢n xu·ªëng nhanh
        x = HOME_X;
        z = HOME_Z + LIFT_HEIGHT * (1.0f - phase);
        y = HOME_Y - STRIDE_LENGTH;
    }
    else {
        // Pha 4: K√©o th√¢n (40% chu k·ª≥)
        float phase = (t - 0.6f) / 0.4f;
        
        // Ch√¢n ƒë√£ ti·∫øp ƒë·∫•t, k√©o th√¢n robot v·ªÅ ph√≠a tr∆∞·ªõc
        x = HOME_X;
        z = HOME_Z;
        y = HOME_Y - STRIDE_LENGTH * (1.0f - phase);
    }
}
